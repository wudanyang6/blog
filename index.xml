<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>少侠的技术博客</title><link>https://wudanyang.top/</link><description>Recent content on 少侠的技术博客</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 23 Apr 2022 15:35:24 +0800</lastBuildDate><atom:link href="https://wudanyang.top/index.xml" rel="self" type="application/rss+xml"/><item><title>关于我</title><link>https://wudanyang.top/about/</link><pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate><guid>https://wudanyang.top/about/</guid><description>日拱一卒 宁静致远</description></item><item><title>制作动态库</title><link>https://wudanyang.top/post/c/%E5%88%B6%E4%BD%9C%E5%8A%A8%E6%80%81%E5%BA%93/</link><pubDate>Sat, 23 Apr 2022 15:35:24 +0800</pubDate><guid>https://wudanyang.top/post/c/%E5%88%B6%E4%BD%9C%E5%8A%A8%E6%80%81%E5%BA%93/</guid><description>1 什么是动态库 与静态库相反，动态库在链接时不会被编译进可执行文件中。 其在执行阶段加载到内存，并且多个程序使用同一个动态库时，只需要在内存中存在一份拷贝即可。 因为是在运行时进行加载，速度上比静态库要慢一些。 1.1 如何制作动态库 来个小函数 1 2 3 4 int add(int a, int b) { return a + b; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1. 生</description></item><item><title>制作静态库</title><link>https://wudanyang.top/post/c/%E5%88%B6%E4%BD%9C%E9%9D%99%E6%80%81%E5%BA%93/</link><pubDate>Fri, 08 Apr 2022 22:53:28 +0800</pubDate><guid>https://wudanyang.top/post/c/%E5%88%B6%E4%BD%9C%E9%9D%99%E6%80%81%E5%BA%93/</guid><description>这里所说的静态库与动态库是什么呢？ 一般来说是指可以复用的代码。之前使用 PHP 或者 Go 的时候，就没有静态库或者动态库的概念。 在 PHP 中，代码复用一般会写到一个单独的文件中，在使用的时候 include 进来直接调用即可，PHP 的解释程序会加载所有文件解析。 Go 语言虽然也可以导出 c 的静态库与动态库，但是一般我们会直接将依赖的包 import 进</description></item><item><title>make 基本使用</title><link>https://wudanyang.top/post/c/make-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 05 Apr 2022 22:09:07 +0800</pubDate><guid>https://wudanyang.top/post/c/make-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>什么是 make ？ 什么是 make: Introduction The make utility automatically determines which pieces of a large program need to be recompiled, and issues commands to recompile them. make 指令自动化地决定一个大型程序的哪部分需要重新编译，并且发出指令重新编译。 简单理解就是，gcc 的编译指令太繁琐并且手写不方便，需要几个工具来管理。这就是 make 工具干的事儿 什么是 makefile ？ Introduction You need a file called a makefile to tell make what to do. Most often, the makefile tells make how to compile and link a program. 需要使用</description></item><item><title>关于职业生涯的思考</title><link>https://wudanyang.top/post/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Sun, 03 Apr 2022 23:10:57 +0800</pubDate><guid>https://wudanyang.top/post/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>媳妇儿公司是做政府项目外包的，平时接待的大多是五十往上的老年人。 前天媳妇儿跟我说，她接到了一个简历，简历上的人是之前的工作是个程序员，因为上个项目结束，被辞退了，最近大环境不好在家呆了很长时间没找到工作，投了他们公司。 说起来程序员看似挣得多，但是危机还是很严重的，不像有一些其他工作越老越吃香。而且程</description></item><item><title>gdb 基本使用</title><link>https://wudanyang.top/post/c/gdb-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 27 Mar 2022 22:28:47 +0800</pubDate><guid>https://wudanyang.top/post/c/gdb-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>1 什么是 gdb gdb 全称：&amp;quot;GNU symbolic debugger&amp;quot; 是一个 gnu 项目孵化出来的调试工具 最常用来调试 c、c++ 程序 2 基本使用 2.1 生成调试信息 在使用 gdb 之前，可执行程序需要生成调试信息 1 g++ test.c -g -o test -g 会在可执行文件中生成一个用于调试的符号表 2.2 启动 gdb 直接后面参数是可执行文件就可以启动调试 1 gdb test 如果要debug一个正在运行的程序</description></item><item><title>gcc编译的几个过程</title><link>https://wudanyang.top/post/c/gcc%E7%BC%96%E8%AF%91%E7%9A%84%E5%87%A0%E4%B8%AA%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 26 Mar 2022 22:22:18 +0800</pubDate><guid>https://wudanyang.top/post/c/gcc%E7%BC%96%E8%AF%91%E7%9A%84%E5%87%A0%E4%B8%AA%E8%BF%87%E7%A8%8B/</guid><description>一段普通的 c++ 代码是如何变成可执行程序的 (使用 g++ 命令编译 c++ 代码) 1 2 3 4 5 6 using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;#34;hello, world&amp;#34; &amp;lt;&amp;lt; endl; return 0; } 会经过4个步骤 预处理 编译 汇编 链接 预处理 作用：宏替换（展开文本，include 文本替换），删除空格等文本处理 相关语句 -E 仅生成 .i 预处理后的文件 编译 -S 仅生成 .s 编译后 .s 后缀文件 将c代码解析后生成汇编语句 下</description></item><item><title>vscode debug nginx 源码</title><link>https://wudanyang.top/post/nginx/vscode-nginx-debug/</link><pubDate>Fri, 18 Mar 2022 23:32:05 +0800</pubDate><guid>https://wudanyang.top/post/nginx/vscode-nginx-debug/</guid><description>1 通过源码安装 nginx 1.1 下载源码 1 git clone https://github.com/nginx/nginx 1.2 编译并安装 nginx 修改 nginx 源码中的配置文件：auto/cc/conf 将第 12 行修改一下 ngx_compile_opt=&amp;quot;-c&amp;quot; 改成： ngx_compile_opt=&amp;quot;-c -g&amp;quot; -g 选项会让编译器产生调试信息 执行配置并安装： 1 2 cd nginx auto/configure 默认被安装在 /usr/local/nginx ，可以通过 --prefix 选项修改 继续执行 make &amp;amp;&amp;amp; make install 到这里，nginx 就安装完毕了 1.3 启动 nginx 1 /usr/local/nginx 默认监听本机 80 端口 完成设置后会</description></item><item><title>rust 教程推荐</title><link>https://wudanyang.top/post/rust/rust-%E6%95%99%E7%A8%8B%E6%8E%A8%E8%8D%90/</link><pubDate>Tue, 15 Mar 2022 19:26:50 +0800</pubDate><guid>https://wudanyang.top/post/rust/rust-%E6%95%99%E7%A8%8B%E6%8E%A8%E8%8D%90/</guid><description>b 站 up 主，软件工艺师 杨旭 全篇基本没废话，干货一路通到底 .biliplayer { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { .biliplayer { width: 100%; height: 250px; } }</description></item><item><title>原神挺好玩</title><link>https://wudanyang.top/post/games/%E5%8E%9F%E7%A5%9E%E6%8C%BA%E5%A5%BD%E7%8E%A9/</link><pubDate>Tue, 15 Mar 2022 08:51:18 +0800</pubDate><guid>https://wudanyang.top/post/games/%E5%8E%9F%E7%A5%9E%E6%8C%BA%E5%A5%BD%E7%8E%A9/</guid><description>最近游戏一直在玩原神，一个开放的大世界。主线剧情刚刚做完，确实是我想象中的角色扮演（RPG）游戏。 记得高中在塞班手机上玩的一款RPG游戏，一个周末都在刷怪。后来重新练了个号，结果跟大师傅打架的时候，他的70级宠物不知道为什么变成我的了。我就带着一个70级将近满级的宠物一路过关斩将玩通关了。 原神里面我</description></item><item><title>软件选择</title><link>https://wudanyang.top/post/others/software-choose/</link><pubDate>Sun, 13 Mar 2022 21:43:43 +0800</pubDate><guid>https://wudanyang.top/post/others/software-choose/</guid><description>最近看到很多计算机企业在制裁俄罗斯，制裁手段包括软件禁止俄罗斯使用，云服务停止等等。 网络上确实也充斥着很多公众号的推文，说俄罗斯的现在很可能就是以后的中国。不过这个以后正在到来，而且也发生了，Figma 禁止大疆使用服务。 未雨绸缪，回想一下自己常用的一些软件，以及替代方案。 phpstorm 本地软件 即使不更新也可以继</description></item><item><title>hugo 实现写完一键发布</title><link>https://wudanyang.top/post/hugo-%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/</link><pubDate>Sat, 12 Mar 2022 23:17:55 +0800</pubDate><guid>https://wudanyang.top/post/hugo-%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/</guid><description>使用 Hugo 创建站点 首先打开 Hugo 官网 Quick start hugo 的安装就不说了，如果这一步觉得很困难，就可以放弃了。 新建站点new 1 2 3 4 5 hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo theme = \&amp;#34;ananke\&amp;#34; &amp;gt;&amp;gt; config.toml 上述做完之后，可以先别急着玩主题，咱们可以后面慢慢探索 添加内容 1 hugo new posts/my-first-post.md 这时，我们可以打开 posts/my-first-post.md ，在里面使用 markdown 语法写一写文字。 比如我这里 使用 hugo server 命令可以在本地</description></item><item><title>树莓派 ubuntu 配置网络</title><link>https://wudanyang.top/post/raspberry/ubuntu-network/</link><pubDate>Wed, 28 Apr 2021 10:18:04 +0800</pubDate><guid>https://wudanyang.top/post/raspberry/ubuntu-network/</guid><description>树莓派 ubuntu 配置网络 树莓派现在可以安装很多操作系统，其中 ubuntu 也提供了树莓派版本，因为对 ubuntu 更加熟悉，所以就往 SD 卡中烧录了 ubuntu 的 20.04 lts 64位 版本。这里有可供选择的操作系统。 简单提一嘴烧录操作系统到 SD 卡上面的方法，树莓派提供了一个傻瓜式的软件给大家使用，直接打开之后选择系统，就可以烧录了，烧录过程大概会有几分钟。 烧</description></item><item><title>如何调试nginx的rewrite规则?</title><link>https://wudanyang.top/post/nginx/how-debug-nginx-rewrite/</link><pubDate>Fri, 23 Apr 2021 14:58:47 +0800</pubDate><guid>https://wudanyang.top/post/nginx/how-debug-nginx-rewrite/</guid><description>如何调试nginx的rewrite规则？ 设置 rewrite_log on; 并且将error_log 的报错等级改成 notice; 官网对 rewrite_log 的解释： 1 2 3 4 5 Syntax: rewrite_log on | off; Default: rewrite_log off; Context: http, server, location, if Enables or disables logging of ngx_http_rewrite_module module directives processing results into the error_log at the notice level. 可以看到，这个指令只能在 http server location if 配置指令中使用，日志等级是 notice 写入到 error_log 配置的文件中。 示例 url： /q?someparams 1 2 3 4 5 6 2021/04/22 18:21:28 [notice] 18131#0: *102982 &amp;#34;^/+m/question(.*)?qid=\d+(.*)?$&amp;#34; does not match</description></item><item><title>Nginx Master 进程主流程</title><link>https://wudanyang.top/post/nginx/nginx-master/</link><pubDate>Tue, 13 Apr 2021 21:07:19 +0800</pubDate><guid>https://wudanyang.top/post/nginx/nginx-master/</guid><description>nginx master 进程主流程 之前有说到 nginx 进程模型-整体架构，下面来看一下 nginx master 进程的主要工作 nginx 的入口 main 函数在 nginx.c 文件中 函数原型为： 1 2 int ngx_cdecl main(int argc, char *const *argv) 在这个函数中，master 做了一系列的初始化操作 最终在下面这个地方进入了主流程中： 1 2 3 4 5 6 7 8 //... if (ngx_process == NGX_PROCESS_SINGLE) { ngx_single_process_cycle(cycle); } else { ngx_master_process_cycle(cycle); } //... 因为我们主要看 master-worker 这种进程模型，所以进入 ngx_master_process_cycle 设置信</description></item><item><title>文件描述符</title><link>https://wudanyang.top/post/os/fd/</link><pubDate>Tue, 13 Apr 2021 11:25:18 +0800</pubDate><guid>https://wudanyang.top/post/os/fd/</guid><description>什么是文件描述符 对于内核而言，所有打开的文件都通过 文件描述符（file descriptor）引用。通常也写作 fd。 文件描述符是一个非负整数。 当打开一个现有文件或者创建一个新文件时，内核向进程返回一个 文件描述符。 文件描述符是跟 进程相关联的。 按照惯例，UNIX 系统将 fd 0 对应进程的标准输入， fd 1 对应进程的</description></item><item><title>如何追查线上问题</title><link>https://wudanyang.top/post/exp/locate-online-error/</link><pubDate>Mon, 12 Apr 2021 12:26:32 +0800</pubDate><guid>https://wudanyang.top/post/exp/locate-online-error/</guid><description>原则 止损优先 不能先追查问题根源， 首先应该止损，不让问题进一步扩大，代码回滚、服务降级等都可以起到止损的效果。 对于止损有一个比较好的实践，新业务或者重构业务上线时，可以加一个 配置开关 控制是否启用逻辑，在发现有损时，可以及时关掉业务逻辑，比重新上线要快很多。 及时通告 在问题发生之后，要及时对处理问题的过程</description></item><item><title>Nginx 进程模型-整体架构</title><link>https://wudanyang.top/post/nginx/nginx-process/</link><pubDate>Sat, 10 Apr 2021 14:26:32 +0800</pubDate><guid>https://wudanyang.top/post/nginx/nginx-process/</guid><description>从网上找了一个非常好的图片，从图中可以看到很多东西 Nginx 会生成多个进程 worker 使用了io 多路复用的事件驱动框架 worker 内部有很多模块 worker 处理磁盘I/O 时，使用了标准I/O ，sendfile ，AIO ，mmap 等I/O 技术 Cache loader 和Cache manager 操作 proxy cache 后端支持多种基于tcp 的网络协议</description></item><item><title>Hello World</title><link>https://wudanyang.top/post/hello-world/</link><pubDate>Fri, 09 Apr 2021 09:08:27 +0000</pubDate><guid>https://wudanyang.top/post/hello-world/</guid><description>回到使用 github pages ，站点基本可用了。 博客园的博客还是比较稳定，但是我发现 hugo 这种方式更加 geek。 找到了另外一种工作流，还算是比较舒服。</description></item></channel></rss>