<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c语言 on 少侠</title><link>https://wudanyang.top/tags/c%E8%AF%AD%E8%A8%80/</link><description>Recent content in c语言 on 少侠</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 27 Mar 2022 22:28:47 +0800</lastBuildDate><atom:link href="https://wudanyang.top/tags/c%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>gdb 基本使用</title><link>https://wudanyang.top/post/c/gdb-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 27 Mar 2022 22:28:47 +0800</pubDate><guid>https://wudanyang.top/post/c/gdb-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>1 什么是 gdb gdb 全称：&amp;quot;GNU symbolic debugger&amp;quot; 是一个 gnu 项目孵化出来的调试工具 最常用来调试 c、c++ 程序 2 基本使用 2.1 生成调试信息 在使用 gdb 之前，可执行程序需要生成调试信息 1 g++ test.c -g -o test -g 会在可执行文件中生成一个用于调试的符号表 2.2 启动 gdb 直接后面参数是可执行文件就可以启动调试 1 gdb test 如果要debug一个正在运行的程序</description></item><item><title>gcc编译的几个过程</title><link>https://wudanyang.top/post/c/gcc%E7%BC%96%E8%AF%91%E7%9A%84%E5%87%A0%E4%B8%AA%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 26 Mar 2022 22:22:18 +0800</pubDate><guid>https://wudanyang.top/post/c/gcc%E7%BC%96%E8%AF%91%E7%9A%84%E5%87%A0%E4%B8%AA%E8%BF%87%E7%A8%8B/</guid><description>一段普通的 c++ 代码是如何变成可执行程序的 (使用 g++ 命令编译 c++ 代码) 1 2 3 4 5 6 using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;#34;hello, world&amp;#34; &amp;lt;&amp;lt; endl; return 0; } 会经过4个步骤 预处理 编译 汇编 链接 预处理 作用：宏替换（展开文本，include 文本替换），删除空格等文本处理 相关语句 -E 仅生成 .i 预处理后的文件 编译 -S 仅生成 .s 编译后 .s 后缀文件 将c代码解析后生成汇编语句 下</description></item></channel></rss>